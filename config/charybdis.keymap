#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include "macros.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// / {
//     chosen { zmk,matrix_transform = &default_transform; };
// };

/ {
    /* input config for mouse move mode */

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 2>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <2>;

        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <3>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <4>;
    };

    /* input config for mouse scroll mode */

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <1>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 14>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    #define DEF 0
#define MOD 1
#define INT 2

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp GRAVE   &kp N1  &kp N2      &kp N3       &kp N4        &kp N5       &kp N6     &kp N7         &kp N8       &kp N9           &kp N0            &kp EQUAL
&kp TAB     &kp Q   &kp W       &kp F        &kp P         &kp B        &kp E      &kp I          &kp U        &kp Y            &kp SINGLE_QUOTE  &kp MINUS
&kp LSHIFT  &kp A   &mt LALT R  &mt LCTRL S  &mt LSHIFT T  &kp G        &kp M      &mt RSHIFT H   &mt RCTRL J  &mt RIGHT_ALT K  &kp L             &kp SEMI
&kp SLASH   &kp Z   &kp X       &kp C        &kp D         &kp V        &kp O      &kp N          &kp COMMA    &kp DOT          &kp BACKSLASH     &kp PRINTSCREEN
                                &kp LGUI     &kp SPACE     &kp LGUI     &kp DEL    &kp BACKSPACE
                                             &mkp LCLK     &mkp RCLK    &kp ENTER
            >;
        };

        Nav {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans    &trans     &trans    &trans      &trans     &trans     &trans
&trans  &trans    &trans    &trans     &trans     &trans    &trans     &trans    &kp K_COPY  &trans     &trans     &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &kp CAPS   &kp LEFT  &kp DOWN    &kp UP     &kp RIGHT  &trans
&trans  &trans    &trans    &trans     &trans     &trans    &trans     &kp HOME  &kp PG_DN   &kp PG_UP  &kp END    &trans
                            &trans     &trans     &trans    &kp DEL    &kp BSPC
                                       &trans     &trans    &kp ENTER
            >;
        };
    };
};
